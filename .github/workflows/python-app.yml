name: Python application

# This workflow will be triggered on push and pull requests to the 'main' and 'dev' branches

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' 

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt


      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 4: Set up environment variables using GitHub Secrets
      - name: Set up environment variables and Run tests
        env:
          USERNAME: ${{ github.repository_owner }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract repository name from github.repository
          REPO=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          echo "REPO=$REPO" >> $GITHUB_ENV

      # Step 5: Debug environment variables
      - name: Debug environment variables
        run: |
          echo "USERNAME: $USERNAME"
          echo "REPO: $REPO"
          echo "TOKEN: $TOKEN"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      - name: Run coverage
        run: |
          coverage run -m unittest discover -s tests
          coverage report
          coverage xml  
